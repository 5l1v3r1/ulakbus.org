@startuml
autonumber

title Generic Request to Response Sequence Diagram

'skinparam defaultFontSize 16
skinparam sequenceArrowFontSize 16
skinparam NoteBackgroundColor #ffffff
skinparam NoteBorderColor #cccccc
skinparam sequenceArrowColor #black
skinparam sequenceLifeLineBorderColor #gray
skinparam actorBackgroundColor #E0ECF8
skinparam actorBorderColor #81BEF7
skinparam participantBackgroundColor #E0ECF8
skinparam participantBorderColor #81BEF7


actor "User\n(Browser)" as brw
boundary "Ext. HA Proxy" as ehp
participant "Tornado" as tor
control "RabbitMQ" as rmq
participant "Zengine Worker Daemon" as zen
'control "SpiffWorkflow" as wfe
participant "Ulakbus Modules" as modls
participant "Ulakbus ESB" as zato
entity "Pyoko DAL" as pyoko
database "Redis" as c
boundary "Int. HA Proxy" as ihp
database "Riak" as riak


brw -> ehp: HTTP connection (login request)
ehp -> tor : HTTP connection (login request)

note over tor : if login successful: \n   <b>upgrade to websocket</b>
ehp <- tor : HTTP connection (login response)
brw <- ehp: HTTP connection (login response)

brw -> ehp: Websocket connection
ehp -> tor : Websocket connection

tor -> rmq: enqueue request \n to "inbound" exchange

rmq -> zen:

zen -> modls :start_or_resume_wf\n( context)
note over zen : <b>context</b> stores current \n workflow name, request \nand response objects

'wfe -> wfe :execute READY \n tasks with context
'wfe -> modls :job_specific_call(context)


modls -\\ ihp : POST:192.168.0.0/16/service_name/?json_payload

ihp -\\ zato : POST:192.168.0.0/16/service_name/?json_payload
activate zato
zato -> pyoko  : get_object()

pyoko -> c : get_from_cache()

alt
pyoko <--  c: found
else cache miss

pyoko <--  c: not found
pyoko -> ihp
ihp -> riak
ihp <-- riak: found
pyoko <-- ihp : found
pyoko -> c: cache object

end

zato <-- pyoko : return object

ihp //-- zato : return object
deactivate zato
modls //-- ihp : return object

zen <-- modls  : return object

'wfe --> wfe  : mark_current_task\n(COMPLETE)


'zen <--  wfe: return json data
zen --> zen : save(serialize(workflow))

note over zen : enqueue to clients own \n"outbound" queue by using \nclients session_id as <b>routing_key</b>
rmq <--  zen : return json response

tor <--  rmq : return json response

note over tor : dispatch response to clients websocket
ehp <-- tor  : return json response

brw <-- ehp : return json response

@enduml
